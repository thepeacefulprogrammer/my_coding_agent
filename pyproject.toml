[build-system]
requires = ["setuptools>=68", "setuptools-scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "my-coding-agent"
dynamic = ["version"]
description = "A clean, fast code viewing application with syntax highlighting"
readme = "README.md"
license = { file = "LICENSE" }
authors = [{ name = "Randy", email = "randy.herritt@gmail.com" }]
maintainers = [{ name = "Randy", email = "randy.herritt@gmail.com" }]
keywords = ["code", "viewer", "syntax", "highlighting", "gui"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Editors",
    "License :: Other/Proprietary License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Natural Language :: English",
]
requires-python = ">=3.10"
dependencies = [
    "PyQt6>=6.6.0",
    "Pygments>=2.17.2",
    "QtAwesome>=1.3.0",
    "pydantic-ai>=0.0.14",
    "openai>=1.54.0",
    "mcp>=1.0.0",
    "fastmcp>=2.5.0",
    "python-dotenv>=1.0.0",
    "crawl4ai>=0.6.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    "chromadb>=0.4.0",
    "sentence-transformers>=2.2.0",
    "more-itertools>=9.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",  # Async test support
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
    "pytest-qt>=4.0.0",        # PyQt6 testing support
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pytest-profiling>=1.7.0", # Code profiling
    "pytest-memray>=1.0.0",    # Memory profiling
    "ruff>=0.1.0",
    "mypy>=1.0",
    "pre-commit>=3.0",
    "build>=1.0",
    "twine>=4.0",
    "pydocstyle>=6.3.0",       # Docstring style checking
    "bandit>=1.7.0",           # Security linting
    "safety>=3.0.0",           # Dependency vulnerability scanning
    "pip-audit>=2.6.0",        # Alternative dependency scanner
]
test = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",  # Async test support
    "pytest-cov>=4.0",
    "pytest-mock>=3.0",
    "pytest-qt>=4.0.0",        # PyQt6 testing support
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pytest-profiling>=1.7.0", # Code profiling
    "pytest-memray>=1.0.0",    # Memory profiling
]
docs = [
    "sphinx>=7.0",
    "sphinx-autodoc-typehints>=1.24",
    "sphinx-rtd-theme>=1.3",
    "myst-parser>=2.0",
    "sphinx-copybutton>=0.5",
    "sphinx-autoapi>=3.0",
    "furo>=2023.9.10",                # Modern Sphinx theme
]

[project.urls]
Repository = "https://github.com/thepeacefulprogrammer/my_coding_agent"
"Bug Tracker" = "https://github.com/thepeacefulprogrammer/my_coding_agent/issues"


# Setuptools configuration
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
my_coding_agent = ["py.typed"]

# Enable setuptools_scm for version management
[tool.setuptools_scm]
write_to = "src/my_coding_agent/_version.py"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration (replaces flake8, isort, and others)
[tool.ruff]
line-length = 88
src = ["src"]
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "ANN", # flake8-annotations
]
ignore = [
    "E501", # line too long, handled by black
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = [
    "S101",    # Use of assert
    "SIM117",  # Combine multiple isinstance checks
    "ANN001",  # Missing type annotation for function argument
    "ANN002",  # Missing type annotation for *args
    "ANN003",  # Missing type annotation for **kwargs
    "ANN201",  # Missing return type annotation for public function
    "ANN202",  # Missing return type annotation for private function
    "ANN204",  # Missing return type annotation for special method
]
"src/my_coding_agent/core/ai_agent.py" = [
    "ANN001", # Missing type annotation for function argument
    "ANN002", # Missing type annotation for *args
    "ANN003", # Missing type annotation for **kwargs
    "E402",   # Module level import not at top of file (for type aliases)
]
"src/my_coding_agent/core/streaming/response_buffer.py" = ["ANN204"]
"src/my_coding_agent/core/memory/memory_transparency.py" = ["ANN204"]
"src/my_coding_agent/gui/components/theme_aware_widget.py" = ["ANN201", "ANN202", "ANN204"]
"src/my_coding_agent/gui/components/message_display.py" = ["ANN201", "ANN202", "ANN204"]
"src/my_coding_agent/gui/components/mcp_tool_visualization.py" = ["ANN401"]
"src/my_coding_agent/core/mcp/*.py" = ["ANN001", "ANN202", "ANN204", "ANN206", "ANN401"]
"src/my_coding_agent/core/mcp_file_server.py" = ["ANN001", "ANN204", "ANN206"]
"src/my_coding_agent/core/file_tree.py" = ["ANN001", "ANN401"]
"src/my_coding_agent/core/file_change_detector.py" = ["ANN001", "ANN204", "ANN401", "SIM102"]
"src/my_coding_agent/core/project_event_recorder.py" = ["ANN204", "ANN401"]
"src/my_coding_agent/core/theme_manager.py" = ["ANN204"]
"src/my_coding_agent/core/memory/chroma_rag_engine.py" = ["ANN204", "ANN401"]
"src/my_coding_agent/core/memory/memory_types.py" = ["ANN001", "ANN201", "ANN206"]
"src/my_coding_agent/core/streaming/stream_handler.py" = ["ANN001", "ANN204"]
"src/my_coding_agent/gui/chat_widget.py" = ["ANN001", "ANN204"]
"src/my_coding_agent/gui/chat_widget_v2.py" = ["ANN001", "ANN204"]
"src/my_coding_agent/gui/chat_message_model.py" = ["ANN001", "ANN204"]
"src/my_coding_agent/config/settings.py" = ["ANN401"]
"src/my_coding_agent/core/memory/memory_classifier.py" = ["ANN204"]
"src/my_coding_agent/core/main_window.py" = ["ANN201", "ANN202"]
"src/my_coding_agent/core/memory_integration.py" = ["ANN001", "ANN204"]
"src/my_coding_agent/core/code_viewer.py" = ["ANN001", "ANN201", "ANN204"]
"src/my_coding_agent/core/task_parser.py" = ["ANN204"]
"examples/**/*" = ["ANN001", "ANN201", "ANN202", "ANN204"]
"tools/**/*" = ["ANN001", "ANN201", "ANN202", "ANN204"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
exclude = ["venv/", "build/", "dist/"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "my_coding_agent.core.memory.*"
ignore_missing_imports = true
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = "crawl4ai.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "chromadb.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "my_coding_agent.core.ai_agent"
# Suppress false positives for complex callback type annotations
warn_unused_ignores = false
# Allow complex callback types that MyPy might not understand
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config -m 'not slow and not integration' -n auto --maxfail=5 --tb=short"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "fast: marks tests as fast unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = ["*/tests/*", "*/test_*", "*/conftest.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pydocstyle]
convention = "google"
add-ignore = ["D100", "D104"] # Missing docstring in public module/package
match-dir = "(?!tests).*"     # Don't check test files

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = [
    "B101",
    "B601",
] # Skip assert_used and shell_injection_subprocess (can be noisy)

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
    "os.execl",
    "os.execle",
    "os.execlp",
    "os.execlpe",
    "os.execv",
    "os.execve",
    "os.execvp",
    "os.execvpe",
    "os.spawnl",
    "os.spawnle",
]

# Pylance/Pyright configuration
[tool.pyright]
include = ["src"]
exclude = ["venv", "build", "dist", "**/__pycache__", "tests"]
reportUnknownMemberType = "none"                               # Ignore PyQt6 incomplete type stubs
reportUnknownArgumentType = "none"                             # Ignore QSettings unknown argument types
reportGeneralTypeIssues = "warning"                            # Keep other type checking
reportAttributeAccessIssue = "none"                            # Ignore attribute access issues for external libraries
reportCallIssue = "warning"                                    # Keep call issues as warnings
pythonVersion = "3.10"                                         # Match project's minimum Python version
typeCheckingMode = "standard"

# File-specific overrides for memory module
[[tool.pyright.overrides]]
include = ["src/my_coding_agent/core/memory/**"]
reportAttributeAccessIssue = "none"
reportCallIssue = "none"
reportGeneralTypeIssues = "none"
